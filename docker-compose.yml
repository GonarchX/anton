version: "3.5"

x-anton-service: &anton-service
  image: "${IMAGE_NAME:-tonindexer/anton}:${IMAGE_TAG:-latest}"
  networks:
    - indexer_network
  depends_on: &anton-deps
    clickhouse:
      condition: service_healthy
    postgres:
      condition: service_healthy
  links:
    - clickhouse
    - postgres
  environment: &anton-env
    DB_CH_URL: "clickhouse://${DB_USERNAME}:${DB_PASSWORD}@clickhouse:9000/${DB_NAME}?sslmode=disable"
    DB_PG_URL: "postgres://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable"

services:
#  indexer:
#    <<: *anton-service
#    depends_on:
#      <<: *anton-deps
#      migrations:
#        condition: service_completed_successfully
#    command: idx
#    environment:
#      <<: *anton-env
#      FROM_BLOCK: ${FROM_BLOCK}
#      WORKERS: ${WORKERS}
#      LITESERVERS: ${LITESERVERS}
#      DEBUG_LOGS: ${DEBUG_LOGS}
#  rescan:
#    <<: *anton-service
#    depends_on:
#      <<: *anton-deps
#      migrations:
#        condition: service_completed_successfully
#    command: rescan
#    environment:
#      <<: *anton-env
#      RESCAN_WORKERS: ${RESCAN_WORKERS}
#      RESCAN_SELECT_LIMIT: ${RESCAN_SELECT_LIMIT}
#      LITESERVERS: ${LITESERVERS}
#      DEBUG_LOGS: ${DEBUG_LOGS}
#  web:
#    <<: *anton-service
#    depends_on:
#      <<: *anton-deps
#      migrations:
#        condition: service_completed_successfully
#    ports:
#      - "8080:8080"
#    expose:
#      - "8080"
#    command: web
#    environment:
#      <<: *anton-env
#      LITESERVERS: ${LITESERVERS}
#      GIN_MODE: "release"
#  migrations:
#    <<: *anton-service
#    command: ["migrate", "up", "--init"]
  clickhouse:
    image: "clickhouse/clickhouse-server:22"
    healthcheck:
      test: wget --spider --no-verbose --tries=1 localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      start_period: 60s
      retries: 10
    networks:
      - indexer_network
    volumes:
      - idx_ch_data:/var/lib/clickhouse
#    expose:
#      - "9000"
#      - "8123"
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:8123:8123"
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    environment:
      CLICKHOUSE_DB: "${DB_NAME}"
      CLICKHOUSE_USER: "${DB_USERNAME}"
      CLICKHOUSE_PASSWORD: "${DB_PASSWORD}"
  postgres:
    image: "postgres:15"
    healthcheck:
      test: pg_isready -U "${DB_USERNAME}" -d "${DB_NAME}" || exit 1
      interval: 5s
      timeout: 5s
      start_period: 60s
      retries: 10
    networks:
      - indexer_network
    volumes:
      - idx_pg_data:/var/lib/postgresql/data
#    expose:
#      - "5432"
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata/
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USERNAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"

  kafka:
    container_name: anton-kafka
    image: confluentinc/cp-kafka:7.5.4.arm64
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  kafka-ui:
    container_name: anton-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9091:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka-init-topics:
    container_name: anton-init-topics
    image: confluentinc/cp-kafka:7.5.4.arm64
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
        cub kafka-ready -b kafka:29092 1 30 && \
        kafka-topics --create --topic unseen-blocks --partitions 16 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
        kafka-topics --create --topic broadcast-messages --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092  && \
        kafka-configs --alter --entity-type topics --entity-name broadcast-messages --add-config retention.ms=900000 --bootstrap-server kafka:29092'"

  redis:
    image: redis:7.0
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: always

networks:
  indexer_network:

volumes:
  idx_ch_data:
  idx_pg_data:
  redis_data:
  kafka_data: